<!--
If you wish to turn off checking for a section of code, you can put a comment in the source
before and after the section, with the following syntax:
  // scalastyle:off
  ...  // stuff that breaks the styles
  // scalastyle:on

You can also disable only one rule, by specifying its rule id, as specified in:
  http://www.scalastyle.org/rules-0.8.0.html
  // scalastyle:off no.finalize
  override def finalize(): Unit = ...
  // scalastyle:on no.finalize

This file is divided into 2 sections:
 (1) rules that we enforce.
 (2) rules that we don't want to enforce.
-->
<scalastyle commentFilter="enabled">
  <name>Scalastyle Configuration (HiFX)</name>

  <!-- ================================================================================ -->
  <!--                               rules we enforce                                   -->
  <!-- ================================================================================ -->

  <check level="warning" class="org.scalastyle.file.FileTabChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.scalariform.SpacesAfterPlusChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.scalariform.SpacesBeforePlusChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.file.WhitespaceEndOfLineChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.file.FileLineLengthChecker" enabled="true">
    <parameters>
      <parameter name="maxLineLength"><![CDATA[160]]></parameter>
      <parameter name="tabSize"><![CDATA[2]]></parameter>
      <parameter name="ignoreImports">true</parameter>
    </parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.ClassNamesChecker" enabled="true">
    <parameters>
      <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
    </parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.ObjectNamesChecker" enabled="true">
    <parameters>
      <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
    </parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.PackageObjectNamesChecker" enabled="true">
    <parameters>
      <parameter name="regex"><![CDATA[^[a-z][A-Za-z]*$]]></parameter>
    </parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.EqualsHashCodeChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.scalariform.IllegalImportsChecker" enabled="true">
    <parameters>
      <parameter name="illegalImports"><![CDATA[sun._,java.awt._]]></parameter>
    </parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.ParameterNumberChecker" enabled="true">
    <parameters>
      <parameter name="maxParameters"><![CDATA[8]]></parameter>
    </parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.MagicNumberChecker" enabled="true">
    <parameters>
      <parameter name="ignore"><![CDATA[-1,0,1,2,3]]></parameter>
    </parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.NoWhitespaceBeforeLeftBracketChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.scalariform.NoWhitespaceAfterLeftBracketChecker" enabled="true"></check>

  <!-- we might have to turn this off if we might endup needing this for control flows -->
  <check level="warning" class="org.scalastyle.scalariform.ReturnChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.scalariform.NullChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.scalariform.NoCloneChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.scalariform.NoFinalizeChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.scalariform.CovariantEqualsChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.scalariform.StructuralTypeChecker" enabled="true"></check>

  <!--                                                    -->
  <!--  RegexChecker check for codign style checks -->
  <!--                                                    -->
  <check enabled="true" class="org.scalastyle.file.RegexChecker" level="warning">
    <parameters>
      <parameter name="regex">for\(|if\(|while\(</parameter>
    </parameters>
    <customMessage>No space before parenthesis after for, if, or while</customMessage>
  </check>

  <check enabled="true" class="org.scalastyle.file.RegexChecker" level="warning">
    <parameters>
      <parameter name="regex">for\s\s+\(|if\s\s+\(|while\s\s+\(</parameter>
    </parameters>
    <customMessage>Too many spaces before parenthesis after for, if, or while</customMessage>
  </check>

  <check enabled="true" class="org.scalastyle.file.RegexChecker" level="warning">
    <parameters>
      <parameter name="regex">if.*\(.*\)\{|while.*\(.*\)\{</parameter>
    </parameters>
    <customMessage>No space before if or while left brace</customMessage>
  </check>

  <check enabled="true" class="org.scalastyle.file.RegexChecker" level="warning">
    <parameters>
      <parameter name="regex">if.*\(.*\)\s\s+\{|while.*\(.*\)\s\s+\{</parameter>
    </parameters>
    <customMessage>Too many spaces before if or while left brace</customMessage>
  </check>

  <check enabled="true" class="org.scalastyle.file.RegexChecker" level="warning">
    <parameters>
      <parameter name="regex">else\{|else.*\)\{</parameter>
    </parameters>
    <customMessage>No space before else left brace</customMessage>
  </check>

  <check enabled="true" class="org.scalastyle.file.RegexChecker" level="warning">
    <parameters>
      <parameter name="regex">else\s\s+\{|else.*\)\s\s+\{</parameter>
    </parameters>
    <customMessage>Too many spaces before else left brace</customMessage>
  </check>

  <check enabled="true" class="org.scalastyle.file.RegexChecker" level="warning">
    <parameters>
      <parameter name="regex">for.*\(.*\)\{|do\{</parameter>
    </parameters>
    <customMessage>No space before for or do left brace</customMessage>
  </check>

  <check enabled="true" class="org.scalastyle.file.RegexChecker" level="warning">
    <parameters>
      <parameter name="regex">for.*\(.*\)\s\s+\{|do\s\s+\{</parameter>
    </parameters>
    <customMessage>Too many spaces before for or do left brace</customMessage>
  </check>

  <check enabled="true" class="org.scalastyle.file.RegexChecker" level="warning">
    <parameters>
      <parameter name="regex">class .*[^\s-]\{|def.*[^\s-]\{</parameter>
    </parameters>
    <customMessage>No space before class or method left brace</customMessage>
  </check>

  <check enabled="true" class="org.scalastyle.file.RegexChecker" level="warning">
    <parameters>
      <parameter name="regex">class .*\s\s+\{|def.*\s\s+\{</parameter>
    </parameters>
    <customMessage>Too many spaces before class or method left brace</customMessage>
  </check>

  <check enabled="true" class="org.scalastyle.file.RegexChecker" level="warning">
    <parameters>
      <parameter name="regex">try\{|catch\{|finally\{</parameter>
    </parameters>
    <customMessage>No space before try, catch, or finally left brace</customMessage>
  </check>

  <check enabled="true" class="org.scalastyle.file.RegexChecker" level="warning">
    <parameters>
      <parameter name="regex">try\s\s+\{|catch\s\s+\{|finally\s\s+\{</parameter>
    </parameters>
    <customMessage>Too many spaces before try, catch, or finally left brace</customMessage>
  </check>
<!--
  <check enabled="true" class="org.scalastyle.file.RegexChecker" level="warning">
    <parameters>
      <parameter name="regex">^[^"]*:[^\s-]|^[^"]*;[^\s-]|^[^"]*,[^\s-]</parameter>
    </parameters>
    <customMessage>Require space after comma, semicolon, and colon not in string</customMessage>
  </check> -->

  <!-- need to check if this might cause false positives -->
  <check enabled="true" class="org.scalastyle.file.RegexChecker" level="warning">
    <parameters>
      <parameter name="regex">\n\s*\{</parameter>
    </parameters>
    <customMessage>Brace on a newline</customMessage>
  </check>

  <check enabled="true" class="org.scalastyle.file.RegexChecker" level="warning">
    <parameters>
      <parameter name="regex">package.*\n[^\s-]</parameter>
    </parameters>
    <customMessage>Missing blank line  after package</customMessage>
  </check>

  <check enabled="true" class="org.scalastyle.file.RegexChecker" level="warning">
    <parameters>
      <parameter name="regex">^import .*\n(?!import )[^\n]*[^\s-]</parameter>
    </parameters>
    <customMessage>Missing blank line after import</customMessage>
    </check>

  <check enabled="true" class="org.scalastyle.file.RegexChecker" level="warning">
    <parameters>
      <parameter name="regex">\n\n\n\n</parameter>
    </parameters>
    <customMessage>max 2 blank lines in the code</customMessage>
  </check>
  <!--                                                    -->
  <!--  End of RegexChecker check for codign style checks -->
  <!--                                                    -->

  <check level="warning" class="org.scalastyle.scalariform.NumberOfTypesChecker" enabled="true">
    <parameters>
      <parameter name="maxTypes"><![CDATA[30]]></parameter>
    </parameters>
  </check>

  <!-- need to check if we might have to tweak this -->
  <check level="warning" class="org.scalastyle.scalariform.CyclomaticComplexityChecker" enabled="true">
    <parameters>
      <parameter name="maximum"><![CDATA[10]]></parameter>
    </parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.UppercaseLChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.scalariform.SimplifyBooleanExpressionChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.scalariform.IfBraceChecker" enabled="true">
    <parameters>
      <parameter name="singleLineAllowed"><![CDATA[true]]></parameter>
      <parameter name="doubleLineAllowed"><![CDATA[false]]></parameter>
    </parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.MethodLengthChecker" enabled="true">
    <parameters>
      <parameter name="maxLength"><![CDATA[300]]></parameter>
    </parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.MethodNamesChecker" enabled="true">
    <parameters>
      <parameter name="regex">^[A-Za-z]*$</parameter>
      <parameter name="ignoreRegex">^.*$</parameter>
      <parameter name="ignoreOverride">false</parameter>
    </parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.NumberOfMethodsInTypeChecker" enabled="true">
    <parameters>
      <parameter name="maxMethods"><![CDATA[30]]></parameter>
    </parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.PublicMethodsHaveTypeChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.file.NewLineAtEofChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.scalariform.RedundantIfChecker" enabled="true"></check>

  <check customId="println" level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
    <parameters>
      <parameter name="regex">^println$</parameter>
    </parameters>
    <customMessage><![CDATA[Are you sure you want to println? If yes, wrap the code block with
          // scalastyle:off println
          println(...)
          // scalastyle:on println]]>
    </customMessage>
  </check>

  <check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceBeforeTokenChecker" enabled="true">
    <parameters>
      <parameter name="tokens">ARROW, EQUALS, ELSE, TRY, CATCH, FINALLY, LARROW, RARROW</parameter>
    </parameters>
  </check>

  <check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceAfterTokenChecker" enabled="true">
    <parameters>
      <parameter name="tokens">ARROW, EQUALS, COMMA, COLON, IF, ELSE, DO, WHILE, FOR, MATCH, TRY, CATCH, FINALLY, LARROW, RARROW</parameter>
    </parameters>
  </check>

  <check level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
    <parameters><parameter name="regex">JavaConversions</parameter></parameters>
    <customMessage>
        Instead of importing implicits in scala.collection.JavaConversions._, import
        scala.collection.JavaConverters._ and use .asScala / .asJava methods
    </customMessage>
  </check>

  <check level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
    <parameters><parameter name="regex">org\.apache\.commons\.lang\.</parameter></parameters>
    <customMessage>
        Use Commons Lang 3 classes (package org.apache.commons.lang3.*) instead
        of Commons Lang 2 (package org.apache.commons.lang.*)
    </customMessage>
  </check>

  <check level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
    <parameters><parameter name="regex">extractOpt</parameter></parameters>
    <customMessage>
        Use Utils.jsonOption(x).map(.extract[T]) instead of .extractOpt[T], as the latter
        is slower.
    </customMessage>
  </check>

  <!-- Avoid Java annotations -->
  <check customId="OverrideJavaCase" level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
    <parameters><parameter name="regex">^Override$</parameter></parameters>
    <customMessage>override modifier should be used instead of @java.lang.Override.</customMessage>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.DeprecatedJavaChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.scalariform.EmptyClassChecker" enabled="true"></check>

  <check level="warning" class="org.scalastyle.scalariform.ClassTypeParameterChecker" enabled="true">
    <parameters>
      <parameter name="regex"><![CDATA[^[A-Z_]$]]></parameter>
    </parameters>
  </check>

  <check level="warning" class="org.scalastyle.scalariform.LowercasePatternMatchChecker" enabled="true"></check>

  <!-- <check level="warning" class="org.scalastyle.scalariform.MultipleStringLiteralsChecker" enabled="true">
    <parameters>
      <parameter name="allowed"><![CDATA[2]]></parameter>
      <parameter name="ignoreRegex"><![CDATA[^""$]]></parameter>
    </parameters>
  </check> -->

  <check level="warning" class="org.scalastyle.scalariform.ImportGroupingChecker" enabled="true"></check>

  <!-- ================================================================================ -->
  <!--                               rules we don't want                                -->
  <!-- ================================================================================ -->

  <!-- Doesn't seem super big deal here ... -->
  <check level="warning" class="org.scalastyle.file.FileLengthChecker" enabled="false">
    <parameters>
      <parameter name="maxFileLength"><![CDATA[800]]></parameter>
    </parameters>
  </check>

  <!-- Could modify later when we want to enforce a standard header ... -->
  <check level="warning" class="org.scalastyle.file.HeaderMatchesChecker" enabled="false">
    <parameters>
      <parameter name="header"><![CDATA[// Copyright (C) 2011-2012 the original author or authors.]]></parameter>
    </parameters>
  </check>

  <check level="warning" class="org.scalastyle.file.NoNewLineAtEofChecker" enabled="false"></check>

  <check level="warning" class="org.scalastyle.scalariform.WhileChecker" enabled="false"></check>

  <check level="warning" class="org.scalastyle.scalariform.VarFieldChecker" enabled="false"></check>

  <check level="warning" class="org.scalastyle.scalariform.VarLocalChecker" enabled="false"></check>

  <check level="warning" class="org.scalastyle.scalariform.UnderscoreImportChecker" enabled="false"></check>

  <!-- ================================================================================ -->
  <!--                                        end                                       -->
  <!-- ================================================================================ -->

</scalastyle>